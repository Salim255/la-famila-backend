name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
  pull_request:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a multi jobs called "build, ...,"
  # Label used to access the service container
  db-container:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Provide the password for postgres
    env:
      POSTGRES_PASSWORD: postgres

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: "17"
      # Performs a clean installation of all dependencies in the `package.json` file
      - name: Install dependencies
        run: npm ci
      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: |
          node client.js
          echo "Hello salim"
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432

  #####----
  build:
    # The type of runner that the job will run on
    runs-on:
      ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v1

        with:
          #Where the cash stored in the home for linux
          path: ~/.npm

          #This key will be used by actions/cache@v1, to retrieve our cash, if it's exist otherwise will be created

          key: ${{ runner.os }}-node-key-${{ hashFiles('**/package-lock.json') }}

          #This expression will allow me to create new cache key every time npm dependencies has changed, and also to have a unique key with every runner.

          restore-keys: |
            ${{runner.os}}-node-key-
          #Restore-keys are extra keys that github can search for caches at , in github didn't find any caches using the main key

      - name: Use NodeJs
        uses: actions/setup-node@v1
        with:
          node-version: "17.x"
      - run: npm ci
      - run: npm run format:check
      - run: npm test -- --coverage
        env:
          CI: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          #My artifacts name so we can retrieve under this name
          name: dist-files
          # Path tell where to find the files should be stored as artifacts, we can store as many as we need
          # path: dist
          path: |
            dist
            package.json
  deploy:
    ## Needs determine weather the job run parallel or not
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          #This wil download the artifacts create in build then unzip it, so it will be available in this deploy job
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
